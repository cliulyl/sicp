#lang sicp
; part a
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (if (eq? (car vals) '*unassigned*)
                 (error "variable is unassigned!" var)
                 (car vals)))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

;part b
(define (filter predicate sequence)
  (if (null? sequence)
      '()
      (if (predicate (car sequence))
          (cons (car sequence) (filter predicate (cdr sequence)))
          (filter predicate (cdr sequence)))))

(define (scan-out-defines proc-body)
    (define (get-unassigned lst)
        (map (lambda (exp)
                     (list (definition-variable exp) '*unassigned*))
             lst))
    (define (define->set body)
        (map (lambda (exp)
                     (if (definition? exp)
                         (list 'set! (definition-variable exp) (definition-value exp))
                         exp))
             body))
    (let ((define-list (filter definition? proc-body)))
         (if (null? define-list)
             proc-body
             (list (append (list 'let (get-unassigned define-list))
                           (define->set proc-body))))))